/*
 * i2c.cpp
 *
 * Created: 11.12.2018 22:27:27
 *  Author: Mikhail
 */ 
#include <avr/io.h>
#include "i2c.h"

//===============================================================
//                    инициализация шины I2C
//===============================================================
void i2c_init (void) {
	////////для I2C/////////
	I2C_DDR &= ~_BV(SDA);		// когда DDR=0, вывод SDA висит в воздухе, когда DDR=1 то SDA притянута к земле (регистром DDR мы и будем манипулировать)
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL);		// когда DDR=0, вывод SCL висит в воздухе, когда DDR=1 то SCL притянута к земле (регистром DDR мы и будем манипулировать)
	I2C_DELAY
	I2C_PORT &= ~_BV(SDA);      // PORT=0 означает, что когда DDR=1 то SDA притянута к земле, когда DDR=0, то SDA висит в воздухе
	I2C_DELAY
	I2C_PORT &= ~_BV(SCL);      // PORT=0 означает, что когда DDR=1 то SCL притянута к земле, когда DDR=0, то SCL висит в воздухе
	I2C_DELAY
}

//===============================================================
//                    Генерация условия старт
//===============================================================
void i2c_start (void)	{
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
	I2C_DELAY
}

//===============================================================
//                   Генерация условия стоп
//===============================================================
void i2c_stop (void)	{
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
	I2C_DELAY
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
	I2C_DELAY
	
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
	I2C_DELAY
}

//===============================================================
//      Генерация условия рестарт
//===============================================================
void i2c_restart (void)	{
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
	I2C_DELAY
	
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
	I2C_DELAY
}

//===============================================================
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{
	unsigned char i;
	unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
	{
		if ((data&0x80)==0x00) I2C_DDR |= _BV(SDA);	// Выставить бит на SDA (лог.0)
		else I2C_DDR &= ~_BV(SDA); // лог.1
		I2C_DELAY
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		data=data<<1;
	}
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1), чтобы ведомое устройство смогло сгенерировать ACK
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1), чтобы ведомое устройство передало ACK
	I2C_DELAY
	if ((I2C_PIN&_BV(SDA))==_BV(SDA)) ack=1; else ack=0;	// Считать ACK

	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)  // приём ACK завершён
	
	return ack; // вернуть ACK (0) или NACK (1)
}

//===============================================================
//                   Считывание байта по I2C
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{
	unsigned char i, res=0;
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	for (i=0;i<8;i++)
	{
		res=res<<1;
		I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)		//Импульс на SCL
		I2C_DELAY
		if ((I2C_PIN&_BV(SDA))==_BV(SDA)) res=res|0x01; // Чтение SDA в переменную
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		I2C_DELAY
	}

	if (last_byte==0) I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)		// Подтверждение, ACK, будем считывать ещё один байт
	else I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)					// Без подтверждения, NACK, это последний считанный байт
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	return res; // вернуть считанное значение
}
